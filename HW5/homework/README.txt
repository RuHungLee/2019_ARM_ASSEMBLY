1.

這次作業是上次卷積作業的延伸，差別在於多用到了函式調用，APCS規則，呼叫c函式malloc。
我剛開始在作業中遇到的困難是我需要使用少量的暫存器來完成卷積。後來找到了解決方法，讓我可以不用擔心暫存器數量的問題。
在要進入3*3卷積時，我先將r1到r10所有暫存器push進stack，結束卷積後我才pop出來。這樣就能在卷積中隨意是使用r1到r10所有暫存器。


2.

MOV ip,sp   
STMFD sp!,{r4-r10,fp,ip,lr,pc}
SUB fp,ip,#4
'''
LDMEA fp,{r4-r10,fp,sp,pc}

上面的程序也是這次作業的重點之一。聽說在arm標準規則當中，並沒有規範一定要使用這樣的方式，但好像已然形成了一種默契。
為了以後能夠做backtrace，在母函式每次進入子函式時，通常會在第一時間將fp,ip,lr,pc和其他可能在子函式用到的暫存器壓棧，
並在要回到母函式前出棧回復。

3.

MOV r0 , #24
bl malloc

c's function malloc會將r0當作傳入參數，實際運作(int *)malloc(sizeof(24))。最後在將配置空間第一個記憶體位置回傳給r0。

